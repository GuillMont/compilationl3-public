Package sc;

Helpers

lettre = [['a' .. 'z'] + ['A' .. 'Z']];

Tokens

number = ['0'..'9']+;
plus = '+';
minus = '-';
mult = '*';
div = '/';
mod = '%';
l_par = '(';
r_par = ')';
espaces = (' ' | 13 | 10)+;
point_virgule = ';';
l_accolade = '{';
r_accolade = '}';
l_crochet = '[';
r_crochet = ']';
si = 'si';
sinon = 'sinon';
alors = 'alors';
retour = 'retour';
faire = 'faire';
tantque = 'tantque';
et = '&';
ou = '|':
non = '!';
egal = '=';
inf = '<'


commentaire = '#' [[0 .. 0xffff] - [10 + 13]]* (10 | 13 | 10 13);

Ignored Tokens

espaces, commentaire;

Productions

EXP = {ou} EXP ou AND | {et} AND;
AND = {et} AND et LOG | {logique} LOG;
LOG = {egal} LOG egal ADD | {inf} LOG inf ADD | {add} ADD;
ADD = {plus} ADD plus FACTOR | {moins} ADD minus FACTOR | {factor} FACTOR;
FACTOR = {mult} FACTOR mult NO | {div} FACTOR div NO | {no} NO;
NO = {no} non FIN | {oui} FIN;
FIN = {exp} l_par EXP r_par | {entier} ENTIER | {appel} APPEL

ENTIER = {multi} number ENTIER | {mono} number;

programme = optdecvar listedecfonc ;


