Package sc;

Helpers

lettre = [['a' .. 'z'] + ['A' .. 'Z']];
number = ['0'..'9']+;


Tokens

blank = (' ' | 13 | 10)+;
number = ['0'..'9']+;
lettre = [['a'..'z'] + ['A' .. 'Z']];
plus = '+';
minus = '-';
mult = '*';
div = '/';
mod = '%';
lpar = '(';
rpar = ')';
pointvirgule = ';';
laccolade = '{';
raccolade = '}';
lcrochet = '[';
rcrochet = ']';
si = 'si';
sinon = 'sinon';
alors = 'alors';
retour = 'retour';
faire = 'faire';
tantque = 'tantque';
et = '&';
ou = '|';
non = '!';
egal = '=';
inf = '<';
ecrire = 'ecrire';
lire = 'lire';
identif = lettre*;



commentaire = '#' [[0 .. 0xffff] - [10 + 13]]* (10 | 13 | 10 13);

Ignored Tokens

blank, commentaire;

Productions

exp = {ou} exp ou and | {et} and;
and = {et} and et log | {logique} log;
log = {egal} log egal add | {inf} log inf add | {add} add;
add = {plus} add plus factor | {moins} add minus factor | {factor} factor;
factor = {mult} factor mult no | {div} factor div no | {no} no;
no = {no} non fin | {oui} fin;
fin = {exp} lpar exp rpar | {entier} entier | {appel} appel | {identif} identif;

entier = {multi} number entier | {mono} number;
appel =  {appel} identif lpar exp rpar pointvirgule;


instruction = {a} affectation | {sa} sialors | {sisi} sisinon | {tq} instrtantque | {r} retourne | {fs} fonctionsimple | {fp} fonctionpredefinie;
blocinstr = laccolade instruction raccolade;
affectation = {a} identif egal exp;
sialors = {si} si exp alors blocinstr;
sisinon = si exp alors laccolade instruction raccolade sinon blocinstr;
instrtantque = {tq} tantque exp faire blocinstr;
retourne = {r} retour exp pointvirgule;
fonctionsimple = {fs} appel;
fonctionpredefinie = {ecrire} ecrire lpar exp rpar pointvirgule | {lire} identif egal lire lpar rpar pointvirgule;


